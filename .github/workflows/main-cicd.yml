name: Main CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.13'
  REGISTRY: docker.io
  IMAGE_NAME: kastoma/api

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: kastoma_test
          MYSQL_USER: kastoma_user
          MYSQL_PASSWORD: kastoma_password
          MYSQL_ROOT_HOST: '%'
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u root -proot_password"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=10
          --health-start-period=30s
          --tmpfs /var/lib/mysql:rw,noexec,nosuid,size=1024m

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libmysqlclient-dev pkg-config

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up environment variables
      run: |
        echo "SECRET_KEY=test-secret-key-for-ci-cd-pipeline" >> $GITHUB_ENV
        echo "DEBUG=True" >> $GITHUB_ENV
        echo "DATABASE_URL=mysql://kastoma_user:kastoma_password@localhost:3306/kastoma_test" >> $GITHUB_ENV
        echo "DJANGO_SETTINGS_MODULE=kastoma_backend.settings.dev" >> $GITHUB_ENV

    - name: Wait for MySQL
      run: |
        timeout=60  # 60 seconds timeout
        elapsed=0
        interval=2
        
        echo "Waiting for MySQL to be ready (timeout: ${timeout}s)..."
        
        while [ $elapsed -lt $timeout ]; do
          if mysqladmin ping -h localhost -u root -proot_password --silent; then
            echo "MySQL is ready! (took ${elapsed}s)"
            exit 0
          fi
          
          echo "MySQL not ready yet... (${elapsed}s/${timeout}s)"
          sleep $interval
          elapsed=$((elapsed + interval))
        done
        
        echo "ERROR: MySQL failed to start within ${timeout} seconds"
        echo "Checking MySQL service status:"
        docker ps --filter "name=mysql" || true
        echo "Checking MySQL logs:"
        docker logs $(docker ps -q --filter "ancestor=mysql:8.0") 2>/dev/null | tail -20 || echo "No MySQL container logs found"
        exit 1

    - name: Verify MySQL database setup
      run: |
        echo "Verifying MySQL connection and database setup..."
        mysql -h localhost -u kastoma_user -pkastoma_password -e "SELECT 1;" kastoma_test || {
          echo "ERROR: Cannot connect to MySQL database 'kastoma_test' with user 'kastoma_user'"
          echo "Attempting to show databases with root user:"
          mysql -h localhost -u root -proot_password -e "SHOW DATABASES;" || echo "Root connection also failed"
          exit 1
        }
        echo "Database connection verified successfully!"

    - name: Run database migrations
      run: |
        echo "Running Django database migrations..."
        python manage.py migrate --settings=kastoma_backend.settings.dev --verbosity=2 || {
          echo "ERROR: Database migrations failed"
          echo "Checking migration status:"
          python manage.py showmigrations --settings=kastoma_backend.settings.dev || true
          exit 1
        }
        echo "Migrations completed successfully!"
      env:
        SECRET_KEY: test-secret-key-for-ci-cd-pipeline
        DEBUG: True
        DATABASE_URL: mysql://kastoma_user:kastoma_password@localhost:3306/kastoma_test

    - name: Run Django tests
      run: |
        python manage.py test --settings=kastoma_backend.settings.dev --verbosity=2
      env:
        SECRET_KEY: test-secret-key-for-ci-cd-pipeline
        DEBUG: True
        DATABASE_URL: mysql://kastoma_user:kastoma_password@localhost:3306/kastoma_test

    - name: Run pytest
      run: |
        pytest --tb=short --disable-warnings
      env:
        SECRET_KEY: test-secret-key-for-ci-cd-pipeline
        DEBUG: True
        DATABASE_URL: mysql://kastoma_user:kastoma_password@localhost:3306/kastoma_test

    - name: Generate coverage report
      run: |
        pip install coverage
        coverage run --source='.' manage.py test --settings=kastoma_backend.settings.dev
        coverage xml
      continue-on-error: true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: kastoma-api-coverage
      continue-on-error: true

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v4

    - name: Log in to Docker Hub
      uses: docker/login-action@v4
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        # Example: SSH into staging server and pull latest image
        # docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop
        # docker-compose -f docker-compose.staging.yml up -d

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment logic here
        # Example: Blue-green deployment with health checks
        # docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        # docker-compose -f docker-compose.prod.yml up -d
        # Run health checks and rollback on failure

  notify:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && (needs.build.result == 'success' || needs.build.result == 'skipped') }}
      run: |
        echo "Main CI/CD Pipeline completed successfully!"
        # Add notification logic (Slack, email, etc.)

    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.build.result == 'failure' }}
      run: |
        echo "Main CI/CD Pipeline failed!"
        # Add notification logic (Slack, email, etc.)